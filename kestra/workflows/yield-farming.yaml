id: yield-farming
namespace: defi.portfolio

inputs:
  - id: amount
    type: FLOAT
  - id: token
    type: STRING
  - id: min_apy
    type: FLOAT
    defaults: 5.0
  - id: risk_level
    type: STRING
    defaults: "moderate"

tasks:
  - id: scan_opportunities
    type: io.kestra.plugin.scripts.python.Script
    script: |
      import json
      from defi_scanner import scan_yield_opportunities
      
      opportunities = scan_yield_opportunities(
          token="{{ inputs.token }}",
          min_apy={{ inputs.min_apy }},
          risk_level="{{ inputs.risk_level }}"
      )
      
      with open('opportunities.json', 'w') as f:
          json.dump(opportunities, f)
    outputFiles:
      - opportunities.json

  - id: risk_assessment
    type: io.kestra.plugin.scripts.python.Script
    inputs:
      opportunities: "{{ outputs.scan_opportunities.files['opportunities.json'] }}"
    outputFiles:
      - risk_scores.json

  - id: optimize_allocation
    type: io.kestra.plugin.scripts.python.Script
    inputs:
      opportunities: "{{ outputs.scan_opportunities.files['opportunities.json'] }}"
      risk_scores: "{{ outputs.risk_assessment.files['risk_scores.json'] }}"
    outputFiles:
      - allocation.json

  - id: deploy_capital
    type: io.kestra.plugin.scripts.python.Script
    inputs:
      allocation: "{{ outputs.optimize_allocation.files['allocation.json'] }}"
      amount: "{{ inputs.amount }}"